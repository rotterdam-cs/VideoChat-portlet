/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rcs.service.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.rcs.service.model.ChatRoom;
import com.rcs.service.service.ChatRoomLocalService;
import com.rcs.service.service.persistence.ChatRoomGroupPersistence;
import com.rcs.service.service.persistence.ChatRoomPersistence;
import com.rcs.service.service.persistence.ConfigurationPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the chat room local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.rcs.service.service.impl.ChatRoomLocalServiceImpl}.
 * </p>
 *
 * @author Flor|Ale
 * @see com.rcs.service.service.impl.ChatRoomLocalServiceImpl
 * @see com.rcs.service.service.ChatRoomLocalServiceUtil
 * @generated
 */
public abstract class ChatRoomLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ChatRoomLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.rcs.service.service.ChatRoomLocalServiceUtil} to access the chat room local service.
	 */

	/**
	 * Adds the chat room to the database. Also notifies the appropriate model listeners.
	 *
	 * @param chatRoom the chat room
	 * @return the chat room that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ChatRoom addChatRoom(ChatRoom chatRoom) throws SystemException {
		chatRoom.setNew(true);

		return chatRoomPersistence.update(chatRoom);
	}

	/**
	 * Creates a new chat room with the primary key. Does not add the chat room to the database.
	 *
	 * @param chatRoomId the primary key for the new chat room
	 * @return the new chat room
	 */
	@Override
	public ChatRoom createChatRoom(long chatRoomId) {
		return chatRoomPersistence.create(chatRoomId);
	}

	/**
	 * Deletes the chat room with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param chatRoomId the primary key of the chat room
	 * @return the chat room that was removed
	 * @throws PortalException if a chat room with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ChatRoom deleteChatRoom(long chatRoomId)
		throws PortalException, SystemException {
		return chatRoomPersistence.remove(chatRoomId);
	}

	/**
	 * Deletes the chat room from the database. Also notifies the appropriate model listeners.
	 *
	 * @param chatRoom the chat room
	 * @return the chat room that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ChatRoom deleteChatRoom(ChatRoom chatRoom) throws SystemException {
		return chatRoomPersistence.remove(chatRoom);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ChatRoom.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return chatRoomPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rcs.service.model.impl.ChatRoomModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return chatRoomPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rcs.service.model.impl.ChatRoomModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return chatRoomPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return chatRoomPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return chatRoomPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ChatRoom fetchChatRoom(long chatRoomId) throws SystemException {
		return chatRoomPersistence.fetchByPrimaryKey(chatRoomId);
	}

	/**
	 * Returns the chat room with the primary key.
	 *
	 * @param chatRoomId the primary key of the chat room
	 * @return the chat room
	 * @throws PortalException if a chat room with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ChatRoom getChatRoom(long chatRoomId)
		throws PortalException, SystemException {
		return chatRoomPersistence.findByPrimaryKey(chatRoomId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return chatRoomPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the chat rooms.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.rcs.service.model.impl.ChatRoomModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of chat rooms
	 * @param end the upper bound of the range of chat rooms (not inclusive)
	 * @return the range of chat rooms
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ChatRoom> getChatRooms(int start, int end)
		throws SystemException {
		return chatRoomPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of chat rooms.
	 *
	 * @return the number of chat rooms
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getChatRoomsCount() throws SystemException {
		return chatRoomPersistence.countAll();
	}

	/**
	 * Updates the chat room in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param chatRoom the chat room
	 * @return the chat room that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ChatRoom updateChatRoom(ChatRoom chatRoom) throws SystemException {
		return chatRoomPersistence.update(chatRoom);
	}

	/**
	 * Returns the chat room local service.
	 *
	 * @return the chat room local service
	 */
	public com.rcs.service.service.ChatRoomLocalService getChatRoomLocalService() {
		return chatRoomLocalService;
	}

	/**
	 * Sets the chat room local service.
	 *
	 * @param chatRoomLocalService the chat room local service
	 */
	public void setChatRoomLocalService(
		com.rcs.service.service.ChatRoomLocalService chatRoomLocalService) {
		this.chatRoomLocalService = chatRoomLocalService;
	}

	/**
	 * Returns the chat room persistence.
	 *
	 * @return the chat room persistence
	 */
	public ChatRoomPersistence getChatRoomPersistence() {
		return chatRoomPersistence;
	}

	/**
	 * Sets the chat room persistence.
	 *
	 * @param chatRoomPersistence the chat room persistence
	 */
	public void setChatRoomPersistence(ChatRoomPersistence chatRoomPersistence) {
		this.chatRoomPersistence = chatRoomPersistence;
	}

	/**
	 * Returns the chat room group local service.
	 *
	 * @return the chat room group local service
	 */
	public com.rcs.service.service.ChatRoomGroupLocalService getChatRoomGroupLocalService() {
		return chatRoomGroupLocalService;
	}

	/**
	 * Sets the chat room group local service.
	 *
	 * @param chatRoomGroupLocalService the chat room group local service
	 */
	public void setChatRoomGroupLocalService(
		com.rcs.service.service.ChatRoomGroupLocalService chatRoomGroupLocalService) {
		this.chatRoomGroupLocalService = chatRoomGroupLocalService;
	}

	/**
	 * Returns the chat room group persistence.
	 *
	 * @return the chat room group persistence
	 */
	public ChatRoomGroupPersistence getChatRoomGroupPersistence() {
		return chatRoomGroupPersistence;
	}

	/**
	 * Sets the chat room group persistence.
	 *
	 * @param chatRoomGroupPersistence the chat room group persistence
	 */
	public void setChatRoomGroupPersistence(
		ChatRoomGroupPersistence chatRoomGroupPersistence) {
		this.chatRoomGroupPersistence = chatRoomGroupPersistence;
	}

	/**
	 * Returns the configuration local service.
	 *
	 * @return the configuration local service
	 */
	public com.rcs.service.service.ConfigurationLocalService getConfigurationLocalService() {
		return configurationLocalService;
	}

	/**
	 * Sets the configuration local service.
	 *
	 * @param configurationLocalService the configuration local service
	 */
	public void setConfigurationLocalService(
		com.rcs.service.service.ConfigurationLocalService configurationLocalService) {
		this.configurationLocalService = configurationLocalService;
	}

	/**
	 * Returns the configuration persistence.
	 *
	 * @return the configuration persistence
	 */
	public ConfigurationPersistence getConfigurationPersistence() {
		return configurationPersistence;
	}

	/**
	 * Sets the configuration persistence.
	 *
	 * @param configurationPersistence the configuration persistence
	 */
	public void setConfigurationPersistence(
		ConfigurationPersistence configurationPersistence) {
		this.configurationPersistence = configurationPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.rcs.service.model.ChatRoom",
			chatRoomLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.rcs.service.model.ChatRoom");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ChatRoom.class;
	}

	protected String getModelClassName() {
		return ChatRoom.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = chatRoomPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.rcs.service.service.ChatRoomLocalService.class)
	protected com.rcs.service.service.ChatRoomLocalService chatRoomLocalService;
	@BeanReference(type = ChatRoomPersistence.class)
	protected ChatRoomPersistence chatRoomPersistence;
	@BeanReference(type = com.rcs.service.service.ChatRoomGroupLocalService.class)
	protected com.rcs.service.service.ChatRoomGroupLocalService chatRoomGroupLocalService;
	@BeanReference(type = ChatRoomGroupPersistence.class)
	protected ChatRoomGroupPersistence chatRoomGroupPersistence;
	@BeanReference(type = com.rcs.service.service.ConfigurationLocalService.class)
	protected com.rcs.service.service.ConfigurationLocalService configurationLocalService;
	@BeanReference(type = ConfigurationPersistence.class)
	protected ConfigurationPersistence configurationPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ChatRoomLocalServiceClpInvoker _clpInvoker = new ChatRoomLocalServiceClpInvoker();
}